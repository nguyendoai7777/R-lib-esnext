{"version":3,"file":"alert.js","sourceRoot":"","sources":["../../projects/src/Alert/alert.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAa,MAAM,OAAO,CAAC;AASlC,MAAM,CAAC,IAAM,YAAY,GAAyB,UAAC,KAAK;IAEpD,IAAA,QAAQ,GAEN,KAAK,SAFC,EACR,KACE,KAAK,KAD0C,EAAzC,gBAAkB,EAAlB,QAAQ,mBAAG,OAAO,KAAA,EAAE,eAAmB,EAAnB,OAAO,mBAAG,SAAS,KAAE,CACzC;IACV,OAAO;QACL,2CACM,KAAK;YAEP,OAAO,IAAI,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;YACjD,QAAQ;YACP,OAAO,IAAI,QAAQ,KAAK,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CACzC,CACR,CAAC;AACN,CAAC,CAAC","sourcesContent":["import React, { FC } from 'react';\r\n\r\nexport interface CustomAlertProps extends React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>{\r\n  icon: {\r\n    position: 'start' | 'end';\r\n    element?: React.ReactNode\r\n  },\r\n}\r\n\r\nexport const CustomButton: FC<CustomAlertProps> = (props) => {\r\n  const {\r\n    children,\r\n    icon: { position = 'start', element = undefined },\r\n  } = props;\r\n  return <>\r\n    <button\r\n      {...props}\r\n    >\r\n      { element && position === 'start' ? element : null}\r\n      {children}\r\n      { element && position === 'end' ? element : null}\r\n    </button>\r\n  </>;\r\n};\r\n"]}